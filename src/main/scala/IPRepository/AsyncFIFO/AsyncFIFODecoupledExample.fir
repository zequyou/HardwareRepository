;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit AsyncFIFODecoupledExample : 
  module AsyncFIFO2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {wr : {flip valid : UInt<1>, flip bits : UInt<10>, not_full : UInt<1>, flip enable : UInt<1>}, rd : {flip valid : UInt<1>, bits : UInt<10>, not_empty : UInt<1>, flip enable : UInt<1>}, flip rd_reset : UInt<1>, flip wr_reset : UInt<1>, flip wr_clock : Clock, flip rd_clock : Clock}
    
    cmem ram : UInt<10>[128] @[AsyncFIFO2.scala 28:16]
    wire wrGrayWire : UInt<10> @[AsyncFIFO2.scala 29:30]
    wire rdGrayWire : UInt<10> @[AsyncFIFO2.scala 30:30]
    reg wrPtr : UInt<8>, io.wr_clock with : (reset => (io.wr_reset, UInt<8>("h00"))) @[AsyncFIFO2.scala 34:24]
    wire wrPtrNext : UInt<8> @[AsyncFIFO2.scala 35:25]
    reg wrGray : UInt<8>, io.wr_clock with : (reset => (io.wr_reset, UInt<8>("h00"))) @[AsyncFIFO2.scala 36:25]
    wire wrGrayNext : UInt<8> @[AsyncFIFO2.scala 37:26]
    reg rdGrayToWr : UInt, io.wr_clock @[AsyncFIFO2.scala 38:29]
    rdGrayToWr <= rdGrayWire @[AsyncFIFO2.scala 38:29]
    reg rdGrayInWr : UInt, io.wr_clock @[AsyncFIFO2.scala 39:29]
    rdGrayInWr <= rdGrayToWr @[AsyncFIFO2.scala 39:29]
    reg wrNotFull : UInt<1>, io.wr_clock with : (reset => (io.wr_reset, UInt<1>("h00"))) @[AsyncFIFO2.scala 40:28]
    node _T_43 = and(io.wr.valid, io.wr.not_full) @[AsyncFIFO2.scala 42:22]
    when _T_43 : @[AsyncFIFO2.scala 42:40]
      node _T_45 = add(wrPtr, UInt<1>("h01")) @[AsyncFIFO2.scala 43:26]
      node _T_46 = tail(_T_45, 1) @[AsyncFIFO2.scala 43:26]
      wrPtrNext <= _T_46 @[AsyncFIFO2.scala 43:17]
      skip @[AsyncFIFO2.scala 42:40]
    else : @[AsyncFIFO2.scala 44:17]
      wrPtrNext <= wrPtr @[AsyncFIFO2.scala 45:17]
      skip @[AsyncFIFO2.scala 44:17]
    node _T_47 = bits(wrPtrNext, 7, 1) @[AsyncFIFO2.scala 47:40]
    node _T_48 = xor(wrPtrNext, _T_47) @[AsyncFIFO2.scala 47:29]
    wrGrayNext <= _T_48 @[AsyncFIFO2.scala 47:16]
    wrPtr <= wrPtrNext @[AsyncFIFO2.scala 49:11]
    wrGray <= wrGrayNext @[AsyncFIFO2.scala 50:12]
    node _T_49 = bits(wrGrayNext, 7, 6) @[AsyncFIFO2.scala 52:20]
    node _T_50 = bits(rdGrayInWr, 7, 6) @[AsyncFIFO2.scala 52:67]
    node _T_51 = not(_T_50) @[AsyncFIFO2.scala 52:56]
    node _T_52 = eq(_T_49, _T_51) @[AsyncFIFO2.scala 52:51]
    node _T_53 = bits(wrGrayNext, 5, 0) @[AsyncFIFO2.scala 53:20]
    node _T_54 = bits(rdGrayInWr, 5, 0) @[AsyncFIFO2.scala 53:53]
    node _T_55 = eq(_T_53, _T_54) @[AsyncFIFO2.scala 53:39]
    node _T_56 = and(_T_52, _T_55) @[AsyncFIFO2.scala 52:109]
    node _T_58 = eq(_T_56, UInt<1>("h00")) @[AsyncFIFO2.scala 51:18]
    node _T_59 = and(_T_58, io.wr.enable) @[AsyncFIFO2.scala 54:9]
    wrNotFull <= _T_59 @[AsyncFIFO2.scala 51:15]
    node _T_60 = and(io.wr.valid, io.wr.not_full) @[AsyncFIFO2.scala 56:22]
    when _T_60 : @[AsyncFIFO2.scala 56:40]
      node _T_61 = bits(wrPtr, 6, 0) @[AsyncFIFO2.scala 57:22]
      write mport _T_62 = ram[_T_61], io.wr_clock
      _T_62 <= io.wr.bits
      skip @[AsyncFIFO2.scala 56:40]
    wrGrayWire <= wrGray @[AsyncFIFO2.scala 60:16]
    io.wr.not_full <= wrNotFull @[AsyncFIFO2.scala 61:20]
    reg rdPtr : UInt<8>, io.rd_clock with : (reset => (io.rd_reset, UInt<8>("h00"))) @[AsyncFIFO2.scala 65:24]
    wire rdPtrNext : UInt<8> @[AsyncFIFO2.scala 66:25]
    reg rdGray : UInt<8>, io.rd_clock with : (reset => (io.rd_reset, UInt<8>("h00"))) @[AsyncFIFO2.scala 67:25]
    wire rdGrayNext : UInt<8> @[AsyncFIFO2.scala 68:26]
    reg wrGrayToRd : UInt, io.rd_clock @[AsyncFIFO2.scala 69:29]
    wrGrayToRd <= wrGrayWire @[AsyncFIFO2.scala 69:29]
    reg wrGrayInRd : UInt, io.rd_clock @[AsyncFIFO2.scala 70:29]
    wrGrayInRd <= wrGrayToRd @[AsyncFIFO2.scala 70:29]
    reg rdNotEmpty : UInt<1>, io.rd_clock with : (reset => (io.rd_reset, UInt<1>("h00"))) @[AsyncFIFO2.scala 71:29]
    reg rdData : UInt<10>, io.rd_clock with : (reset => (io.rd_reset, UInt<10>("h00"))) @[AsyncFIFO2.scala 72:25]
    node _T_75 = and(io.rd.valid, io.rd.not_empty) @[AsyncFIFO2.scala 74:22]
    when _T_75 : @[AsyncFIFO2.scala 74:41]
      node _T_77 = add(rdPtr, UInt<1>("h01")) @[AsyncFIFO2.scala 75:26]
      node _T_78 = tail(_T_77, 1) @[AsyncFIFO2.scala 75:26]
      rdPtrNext <= _T_78 @[AsyncFIFO2.scala 75:17]
      skip @[AsyncFIFO2.scala 74:41]
    else : @[AsyncFIFO2.scala 76:17]
      rdPtrNext <= rdPtr @[AsyncFIFO2.scala 77:17]
      skip @[AsyncFIFO2.scala 76:17]
    node _T_79 = bits(rdPtrNext, 7, 1) @[AsyncFIFO2.scala 79:40]
    node _T_80 = xor(rdPtrNext, _T_79) @[AsyncFIFO2.scala 79:29]
    rdGrayNext <= _T_80 @[AsyncFIFO2.scala 79:16]
    rdPtr <= rdPtrNext @[AsyncFIFO2.scala 81:11]
    rdGray <= rdGrayNext @[AsyncFIFO2.scala 82:12]
    node _T_81 = neq(rdGrayNext, wrGrayInRd) @[AsyncFIFO2.scala 83:30]
    node _T_82 = and(_T_81, io.rd.enable) @[AsyncFIFO2.scala 83:45]
    rdNotEmpty <= _T_82 @[AsyncFIFO2.scala 83:16]
    when io.rd.valid : @[AsyncFIFO2.scala 84:23]
      node _T_83 = bits(rdPtr, 6, 0) @[AsyncFIFO2.scala 85:31]
      read mport _T_84 = ram[_T_83], io.rd_clock @[AsyncFIFO2.scala 85:25]
      rdData <= _T_84 @[AsyncFIFO2.scala 85:14]
      skip @[AsyncFIFO2.scala 84:23]
    rdGrayWire <= rdGray @[AsyncFIFO2.scala 88:16]
    io.rd.bits <= rdData @[AsyncFIFO2.scala 89:16]
    io.rd.not_empty <= rdNotEmpty @[AsyncFIFO2.scala 90:21]
    
  module AsyncFIFODecoupled : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wr : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<10>}, flip wr_enable : UInt<1>, rd : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<10>}, flip rd_enable : UInt<1>, flip rd_reset : UInt<1>, flip wr_reset : UInt<1>, flip wr_clock : Clock, flip rd_clock : Clock}
    
    inst asyncFIFO of AsyncFIFO2 @[AsyncFIFODecoupled.scala 23:25]
    asyncFIFO.clock <= clock
    asyncFIFO.reset <= reset
    asyncFIFO.io.wr_clock <= io.wr_clock @[AsyncFIFODecoupled.scala 26:25]
    asyncFIFO.io.wr_reset <= io.wr_reset @[AsyncFIFODecoupled.scala 27:25]
    asyncFIFO.io.rd_clock <= io.rd_clock @[AsyncFIFODecoupled.scala 28:25]
    asyncFIFO.io.rd_reset <= io.rd_reset @[AsyncFIFODecoupled.scala 29:25]
    asyncFIFO.io.wr.bits <= io.wr.bits @[AsyncFIFODecoupled.scala 32:24]
    asyncFIFO.io.wr.valid <= io.wr.valid @[AsyncFIFODecoupled.scala 33:25]
    asyncFIFO.io.wr.enable <= io.wr_enable @[AsyncFIFODecoupled.scala 34:26]
    io.wr.ready <= asyncFIFO.io.wr.not_full @[AsyncFIFODecoupled.scala 35:15]
    wire readFirstData : UInt<10> @[AsyncFIFODecoupled.scala 38:29]
    reg readFirstValid : UInt<1>, io.rd_clock with : (reset => (io.rd_reset, UInt<1>("h00"))) @[AsyncFIFODecoupled.scala 39:33]
    reg readSecondData : UInt<10>, io.rd_clock with : (reset => (io.rd_reset, UInt<10>("h00"))) @[AsyncFIFODecoupled.scala 40:33]
    reg readSecondValid : UInt<1>, io.rd_clock with : (reset => (io.rd_reset, UInt<1>("h00"))) @[AsyncFIFODecoupled.scala 41:34]
    reg readThirdData : UInt<10>, io.rd_clock with : (reset => (io.rd_reset, UInt<10>("h00"))) @[AsyncFIFODecoupled.scala 42:32]
    reg readThirdValid : UInt<1>, io.rd_clock with : (reset => (io.rd_reset, UInt<1>("h00"))) @[AsyncFIFODecoupled.scala 43:33]
    reg readValid : UInt<1>, io.rd_clock with : (reset => (io.rd_reset, UInt<1>("h00"))) @[AsyncFIFODecoupled.scala 44:28]
    reg readEnableDelay1 : UInt<1>, io.rd_clock @[AsyncFIFODecoupled.scala 45:35]
    readEnableDelay1 <= io.rd_enable @[AsyncFIFODecoupled.scala 45:35]
    wire willUpdateThird : UInt<1> @[AsyncFIFODecoupled.scala 47:31]
    wire willUpdateSecond : UInt<1> @[AsyncFIFODecoupled.scala 48:32]
    wire readFIFOEnable : UInt<1> @[AsyncFIFODecoupled.scala 49:30]
    readFirstData <= asyncFIFO.io.rd.bits @[AsyncFIFODecoupled.scala 51:19]
    node _T_52 = or(readSecondValid, readFirstValid) @[AsyncFIFODecoupled.scala 52:41]
    node _T_54 = eq(readThirdValid, UInt<1>("h00")) @[AsyncFIFODecoupled.scala 52:62]
    node _T_55 = and(io.rd.ready, io.rd.valid) @[AsyncFIFODecoupled.scala 52:93]
    node _T_56 = or(_T_54, _T_55) @[AsyncFIFODecoupled.scala 52:78]
    node _T_57 = and(_T_52, _T_56) @[AsyncFIFODecoupled.scala 52:59]
    willUpdateThird <= _T_57 @[AsyncFIFODecoupled.scala 52:21]
    node _T_58 = eq(readSecondValid, willUpdateThird) @[AsyncFIFODecoupled.scala 53:59]
    node _T_59 = and(readFirstValid, _T_58) @[AsyncFIFODecoupled.scala 53:40]
    willUpdateSecond <= _T_59 @[AsyncFIFODecoupled.scala 53:22]
    node _T_60 = and(readFirstValid, readSecondValid) @[AsyncFIFODecoupled.scala 54:40]
    node _T_62 = eq(_T_60, UInt<1>("h00")) @[AsyncFIFODecoupled.scala 54:23]
    node _T_63 = and(_T_62, asyncFIFO.io.rd.not_empty) @[AsyncFIFODecoupled.scala 54:59]
    readFIFOEnable <= _T_63 @[AsyncFIFODecoupled.scala 54:20]
    node _T_65 = eq(io.rd_enable, UInt<1>("h00")) @[AsyncFIFODecoupled.scala 56:11]
    when _T_65 : @[AsyncFIFODecoupled.scala 56:27]
      readValid <= UInt<1>("h00") @[AsyncFIFODecoupled.scala 57:17]
      skip @[AsyncFIFODecoupled.scala 56:27]
    else : @[AsyncFIFODecoupled.scala 58:18]
      node _T_68 = eq(readEnableDelay1, UInt<1>("h00")) @[AsyncFIFODecoupled.scala 59:49]
      node _T_69 = and(readThirdValid, _T_68) @[AsyncFIFODecoupled.scala 59:47]
      node _T_70 = or(willUpdateThird, _T_69) @[AsyncFIFODecoupled.scala 59:29]
      when _T_70 : @[AsyncFIFODecoupled.scala 59:69]
        readValid <= UInt<1>("h01") @[AsyncFIFODecoupled.scala 60:19]
        skip @[AsyncFIFODecoupled.scala 59:69]
      else : @[AsyncFIFODecoupled.scala 61:46]
        node _T_72 = and(io.rd.ready, io.rd.valid) @[AsyncFIFODecoupled.scala 61:31]
        when _T_72 : @[AsyncFIFODecoupled.scala 61:46]
          readValid <= UInt<1>("h00") @[AsyncFIFODecoupled.scala 62:19]
          skip @[AsyncFIFODecoupled.scala 61:46]
      skip @[AsyncFIFODecoupled.scala 58:18]
    when willUpdateThird : @[AsyncFIFODecoupled.scala 66:27]
      readThirdValid <= UInt<1>("h01") @[AsyncFIFODecoupled.scala 67:22]
      skip @[AsyncFIFODecoupled.scala 66:27]
    else : @[AsyncFIFODecoupled.scala 68:43]
      node _T_75 = and(io.rd.ready, io.rd.valid) @[AsyncFIFODecoupled.scala 68:28]
      when _T_75 : @[AsyncFIFODecoupled.scala 68:43]
        readThirdValid <= UInt<1>("h00") @[AsyncFIFODecoupled.scala 69:22]
        skip @[AsyncFIFODecoupled.scala 68:43]
    when willUpdateSecond : @[AsyncFIFODecoupled.scala 72:28]
      readSecondValid <= UInt<1>("h01") @[AsyncFIFODecoupled.scala 73:23]
      skip @[AsyncFIFODecoupled.scala 72:28]
    else : @[AsyncFIFODecoupled.scala 74:33]
      when willUpdateThird : @[AsyncFIFODecoupled.scala 74:33]
        readSecondValid <= UInt<1>("h00") @[AsyncFIFODecoupled.scala 75:23]
        skip @[AsyncFIFODecoupled.scala 74:33]
    when readFIFOEnable : @[AsyncFIFODecoupled.scala 78:26]
      readFirstValid <= UInt<1>("h01") @[AsyncFIFODecoupled.scala 79:22]
      skip @[AsyncFIFODecoupled.scala 78:26]
    else : @[AsyncFIFODecoupled.scala 80:52]
      node _T_80 = or(willUpdateSecond, willUpdateThird) @[AsyncFIFODecoupled.scala 80:33]
      when _T_80 : @[AsyncFIFODecoupled.scala 80:52]
        readFirstValid <= UInt<1>("h00") @[AsyncFIFODecoupled.scala 81:22]
        skip @[AsyncFIFODecoupled.scala 80:52]
    when willUpdateThird : @[AsyncFIFODecoupled.scala 84:27]
      when readSecondValid : @[AsyncFIFODecoupled.scala 85:29]
        readThirdData <= readSecondData @[AsyncFIFODecoupled.scala 86:23]
        skip @[AsyncFIFODecoupled.scala 85:29]
      else : @[AsyncFIFODecoupled.scala 87:19]
        readThirdData <= readFirstData @[AsyncFIFODecoupled.scala 88:23]
        skip @[AsyncFIFODecoupled.scala 87:19]
      skip @[AsyncFIFODecoupled.scala 84:27]
    when willUpdateSecond : @[AsyncFIFODecoupled.scala 92:28]
      readSecondData <= readFirstData @[AsyncFIFODecoupled.scala 93:22]
      skip @[AsyncFIFODecoupled.scala 92:28]
    asyncFIFO.io.rd.valid <= readFIFOEnable @[AsyncFIFODecoupled.scala 96:27]
    asyncFIFO.io.rd.enable <= UInt<1>("h01") @[AsyncFIFODecoupled.scala 97:28]
    io.rd.valid <= readValid @[AsyncFIFODecoupled.scala 98:17]
    io.rd.bits <= readThirdData @[AsyncFIFODecoupled.scala 99:16]
    
  module AsyncFIFODecoupledExample : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wr_clock : Clock, flip wr_reset : UInt<1>, wr_valid : UInt<1>, wr_ready : UInt<1>, wr_bits : UInt<10>, flip rd_clock : Clock, flip rd_reset : UInt<1>, rd_valid : UInt<1>, rd_ready : UInt<1>, rd_bits : UInt<10>}
    
    inst fifo of AsyncFIFODecoupled @[AsyncFIFODecoupledExample.scala 24:20]
    fifo.clock <= clock
    fifo.reset <= reset
    fifo.io.wr_enable <= UInt<1>("h01") @[AsyncFIFODecoupledExample.scala 25:21]
    fifo.io.wr_clock <= io.wr_clock @[AsyncFIFODecoupledExample.scala 26:20]
    fifo.io.wr_reset <= io.wr_reset @[AsyncFIFODecoupledExample.scala 27:20]
    fifo.io.rd_enable <= UInt<1>("h01") @[AsyncFIFODecoupledExample.scala 28:21]
    fifo.io.rd_clock <= io.rd_clock @[AsyncFIFODecoupledExample.scala 29:20]
    fifo.io.rd_reset <= io.rd_reset @[AsyncFIFODecoupledExample.scala 30:20]
    reg counter : UInt<10>, io.wr_clock with : (reset => (io.wr_reset, UInt<10>("h00"))) @[AsyncFIFODecoupledExample.scala 35:26]
    reg delay : UInt<8>, io.wr_clock with : (reset => (io.wr_reset, UInt<8>("h00"))) @[AsyncFIFODecoupledExample.scala 36:24]
    reg state : UInt<2>, io.wr_clock with : (reset => (io.wr_reset, UInt<2>("h00"))) @[AsyncFIFODecoupledExample.scala 37:24]
    reg writeValid : UInt<1>, io.wr_clock with : (reset => (io.wr_reset, UInt<1>("h00"))) @[AsyncFIFODecoupledExample.scala 38:29]
    node _T_34 = eq(UInt<2>("h00"), state) @[Conditional.scala 37:30]
    when _T_34 : @[Conditional.scala 40:58]
      state <= UInt<2>("h01") @[AsyncFIFODecoupledExample.scala 42:15]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_35 = eq(UInt<2>("h01"), state) @[Conditional.scala 37:30]
      when _T_35 : @[Conditional.scala 39:67]
        node _T_37 = eq(fifo.io.wr.ready, UInt<1>("h00")) @[AsyncFIFODecoupledExample.scala 45:14]
        when _T_37 : @[AsyncFIFODecoupledExample.scala 45:33]
          state <= UInt<2>("h02") @[AsyncFIFODecoupledExample.scala 46:17]
          skip @[AsyncFIFODecoupledExample.scala 45:33]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_38 = eq(UInt<2>("h02"), state) @[Conditional.scala 37:30]
        when _T_38 : @[Conditional.scala 39:67]
          node _T_40 = eq(delay, UInt<8>("h0ff")) @[AsyncFIFODecoupledExample.scala 50:20]
          when _T_40 : @[AsyncFIFODecoupledExample.scala 50:31]
            state <= UInt<2>("h01") @[AsyncFIFODecoupledExample.scala 51:17]
            skip @[AsyncFIFODecoupledExample.scala 50:31]
          skip @[Conditional.scala 39:67]
    node _T_41 = eq(state, UInt<2>("h02")) @[AsyncFIFODecoupledExample.scala 56:16]
    when _T_41 : @[AsyncFIFODecoupledExample.scala 56:26]
      node _T_43 = add(delay, UInt<1>("h01")) @[AsyncFIFODecoupledExample.scala 57:22]
      node _T_44 = tail(_T_43, 1) @[AsyncFIFODecoupledExample.scala 57:22]
      delay <= _T_44 @[AsyncFIFODecoupledExample.scala 57:13]
      skip @[AsyncFIFODecoupledExample.scala 56:26]
    else : @[AsyncFIFODecoupledExample.scala 58:17]
      delay <= UInt<1>("h00") @[AsyncFIFODecoupledExample.scala 59:13]
      skip @[AsyncFIFODecoupledExample.scala 58:17]
    node _T_46 = and(fifo.io.wr.valid, fifo.io.wr.ready) @[AsyncFIFODecoupledExample.scala 62:27]
    when _T_46 : @[AsyncFIFODecoupledExample.scala 62:47]
      node _T_48 = add(counter, UInt<1>("h01")) @[AsyncFIFODecoupledExample.scala 63:26]
      node _T_49 = tail(_T_48, 1) @[AsyncFIFODecoupledExample.scala 63:26]
      counter <= _T_49 @[AsyncFIFODecoupledExample.scala 63:15]
      skip @[AsyncFIFODecoupledExample.scala 62:47]
    node _T_50 = eq(state, UInt<2>("h01")) @[AsyncFIFODecoupledExample.scala 66:16]
    when _T_50 : @[AsyncFIFODecoupledExample.scala 66:29]
      writeValid <= UInt<1>("h01") @[AsyncFIFODecoupledExample.scala 67:18]
      skip @[AsyncFIFODecoupledExample.scala 66:29]
    else : @[AsyncFIFODecoupledExample.scala 68:17]
      writeValid <= UInt<1>("h00") @[AsyncFIFODecoupledExample.scala 69:18]
      skip @[AsyncFIFODecoupledExample.scala 68:17]
    fifo.io.wr.valid <= writeValid @[AsyncFIFODecoupledExample.scala 72:22]
    fifo.io.wr.bits <= counter @[AsyncFIFODecoupledExample.scala 73:21]
    io.wr_bits <= fifo.io.wr.bits @[AsyncFIFODecoupledExample.scala 75:16]
    io.wr_valid <= writeValid @[AsyncFIFODecoupledExample.scala 76:17]
    io.wr_ready <= fifo.io.wr.ready @[AsyncFIFODecoupledExample.scala 77:17]
    reg delay_1 : UInt<8>, io.rd_clock with : (reset => (io.rd_reset, UInt<8>("h00"))) @[AsyncFIFODecoupledExample.scala 83:24]
    reg state_1 : UInt<2>, io.rd_clock with : (reset => (io.rd_reset, UInt<2>("h00"))) @[AsyncFIFODecoupledExample.scala 84:24]
    reg readReady : UInt<1>, io.rd_clock with : (reset => (io.rd_reset, UInt<1>("h00"))) @[AsyncFIFODecoupledExample.scala 85:28]
    node _T_58 = eq(UInt<2>("h00"), state_1) @[Conditional.scala 37:30]
    when _T_58 : @[Conditional.scala 40:58]
      state_1 <= UInt<2>("h01") @[AsyncFIFODecoupledExample.scala 89:15]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_59 = eq(UInt<2>("h01"), state_1) @[Conditional.scala 37:30]
      when _T_59 : @[Conditional.scala 39:67]
        node _T_61 = eq(fifo.io.rd.valid, UInt<1>("h00")) @[AsyncFIFODecoupledExample.scala 92:15]
        when _T_61 : @[AsyncFIFODecoupledExample.scala 92:35]
          state_1 <= UInt<2>("h02") @[AsyncFIFODecoupledExample.scala 93:17]
          skip @[AsyncFIFODecoupledExample.scala 92:35]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_62 = eq(UInt<2>("h02"), state_1) @[Conditional.scala 37:30]
        when _T_62 : @[Conditional.scala 39:67]
          node _T_64 = eq(delay_1, UInt<8>("h0ff")) @[AsyncFIFODecoupledExample.scala 97:21]
          when _T_64 : @[AsyncFIFODecoupledExample.scala 97:32]
            state_1 <= UInt<2>("h01") @[AsyncFIFODecoupledExample.scala 98:17]
            skip @[AsyncFIFODecoupledExample.scala 97:32]
          skip @[Conditional.scala 39:67]
    node _T_65 = eq(state_1, UInt<2>("h02")) @[AsyncFIFODecoupledExample.scala 103:16]
    when _T_65 : @[AsyncFIFODecoupledExample.scala 103:26]
      node _T_67 = add(delay_1, UInt<1>("h01")) @[AsyncFIFODecoupledExample.scala 104:22]
      node _T_68 = tail(_T_67, 1) @[AsyncFIFODecoupledExample.scala 104:22]
      delay_1 <= _T_68 @[AsyncFIFODecoupledExample.scala 104:13]
      skip @[AsyncFIFODecoupledExample.scala 103:26]
    else : @[AsyncFIFODecoupledExample.scala 105:18]
      delay_1 <= UInt<1>("h00") @[AsyncFIFODecoupledExample.scala 106:13]
      skip @[AsyncFIFODecoupledExample.scala 105:18]
    node _T_70 = eq(state_1, UInt<2>("h01")) @[AsyncFIFODecoupledExample.scala 109:17]
    when _T_70 : @[AsyncFIFODecoupledExample.scala 109:30]
      readReady <= UInt<1>("h01") @[AsyncFIFODecoupledExample.scala 110:17]
      skip @[AsyncFIFODecoupledExample.scala 109:30]
    else : @[AsyncFIFODecoupledExample.scala 111:18]
      readReady <= UInt<1>("h00") @[AsyncFIFODecoupledExample.scala 112:17]
      skip @[AsyncFIFODecoupledExample.scala 111:18]
    fifo.io.rd.ready <= readReady @[AsyncFIFODecoupledExample.scala 115:22]
    io.rd_bits <= fifo.io.rd.bits @[AsyncFIFODecoupledExample.scala 117:16]
    io.rd_valid <= fifo.io.rd.valid @[AsyncFIFODecoupledExample.scala 118:17]
    io.rd_ready <= fifo.io.rd.ready @[AsyncFIFODecoupledExample.scala 119:17]
    
